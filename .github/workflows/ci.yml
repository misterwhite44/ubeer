name: tests

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout backend repository
        uses: actions/checkout@v2
        with:
          repository: misterwhite44/back_ubeers 
          path: back_ubeers  

      - name: Install backend dependencies
        run: |
          cd back_ubeers  # Accède au répertoire du backend cloné
          pip install -r requirements.txt  # Installe les dépendances du backend si nécessaire

      - name: Start Flask backend server
        run: |
          cd back_ubeers  # Répertoire du backend
          nohup python3 app.py &  # Démarre Flask en arrière-plan avec python3
          sleep 10  # Attends que le serveur démarre

      - name: Run Backend Unit Tests
        run: |
          cd back_ubeers  # Accède au répertoire du backend
          python3 test_app.py  # Découvre et exécute tous les fichiers de test débutant par 'test_'

      - name: Run Backend Integration Tests
        run: |
          cd back_ubeers  # Accède au répertoire du backend
          python3 test_integration.py  # Exécute les tests d'intégration du backend
      
      - name: Start services with Docker Compose
        run: |
          docker-compose -f back_ubeers/docker-compose.yml up -d
          sleep 20

      - name: Run OWASP ZAP Security Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t http://flask-api:5000/breweries/ \
            -r zap-breweries-report.html

      - name: Stop Docker Compose services
        run: |
          docker-compose down  # Arrête les services une fois les tests terminés


  frontend-tests:
    runs-on: ubuntu-latest
    needs: backend-tests  

    steps:
      - name: Checkout frontend repository
        uses: actions/checkout@v2
        with:
          repository: misterwhite44/ubeer  
          path: ubeer  

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  

      - name: Install frontend dependencies
        run: |
          cd ubeer  # Accède au répertoire du frontend cloné
          npm install  # Installe les dépendances du frontend
      
      - name: Checkout backend repository
        uses: actions/checkout@v2
        with:
          repository: misterwhite44/back_ubeers 
          path: back_ubeers  

      - name: Install backend dependencies
        run: |
          cd back_ubeers  # Accède au répertoire du backend cloné
          pip install -r requirements.txt  # Installe les dépendances du backend si nécessaire

      - name: Start Flask backend server
        run: |
          cd back_ubeers  # Répertoire du backend
          nohup python3 app.py &  # Démarre Flask en arrière-plan avec python3
          sleep 10  # Attends que le serveur démarre

      - name: Start the frontend application
        run: |
          cd ubeer  # Répertoire du frontend
          nohup npm start &  # Démarre l'application frontend en arrière-plan
          sleep 10  # Attends que le serveur frontend démarre

      # Jmeter

      - name: Install and launch JMeter tests
        run: |
          sudo apt update
          sudo apt install -y openjdk-11-jre  # JMeter nécessite Java, donc on installe OpenJDK
          wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xvzf apache-jmeter-5.6.3.tgz  # Décompresse l'archive téléchargée
          sudo mv apache-jmeter-5.6.3 /opt/jmeter  # Déplace dans le répertoire /opt
          export PATH=$PATH:/opt/jmeter/bin  # Ajoute JMeter au PATH
          export PATH=$JMETER_HOME/bin:$PATH
          echo "export PATH=$JMETER_HOME/bin:\$PATH" >> $GITHUB_ENV  # Rendre PATH dispo dans les étapes suivantes
          cd ubeer  # Accède au répertoire du frontend
          jmeter -n -t tests/jmeter/test_beers_load.jmx -l results.jtl

      - name: Run Playwright Tests
        run: |
          cd ubeer  # Accède au répertoire du frontend
          npx playwright install  # Installer Playwright (si nécessaire)
          npx playwright test  # Exécuter les tests Playwright
